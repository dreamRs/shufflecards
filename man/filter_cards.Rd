% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update.R
\name{filter_cards}
\alias{filter_cards}
\title{Filter a Shuffle grid layout with custom values}
\usage{
filter_cards(shuffleId, by, filters,
  session = shiny::getDefaultReactiveDomain())
}
\arguments{
\item{shuffleId}{The id of the shuffle container.}

\item{by}{Key defined in \code{shuffle_card} to filter elements, can be \code{"id"}
to refer to the unique ID associated with the card.}

\item{filters}{Possible values are:

  - \strong{named list:} where names match the key used in \code{by} and values are \code{TRUE} or \code{FALSE}

  - \strong{two-columns data.frame:} where first column contains names and second \code{TRUE} or \code{FALSE}

  - \strong{one-column data.frame:} where the column contains cards key to display (those absent will be hided)

  - \strong{character vector:} containing cards key to display}

\item{session}{The \code{session} object passed to function given to shinyServer.}
}
\description{
Use in a \strong{Shiny} app to filter cards by a custom value.
}
\examples{
if (interactive()) {
  library(ggplot2)
  library(dplyr)
  library(shiny)
  library(shufflecards)



  # utility fun
  is.even <- function(x) x \%\% 2 == 0

  ui <- fluidPage(
    tags$h2("Filter a Shuffle Grid"),
    fluidRow(
      column(
        width = 3,
        radioButtons(
          inputId = "type_num",
          label = "Odd or Even",
          choices = c("All", "Odd", "Even")
        ),
        sliderInput(
          inputId = "val_num",
          label = "Value:",
          min = 1, max = 12,
          value = c(1, 12)
        )
      ),
      column(
        width = 9,
        shuffle_container(
          shuffleId = "gridNum",
          card_list = lapply(
            X = 1:12,
            FUN = function(i) {
              shuffle_card(
                id = paste0("card", i), # set an ID to cards to use server-side
                plotOutput(outputId = paste0("plot", i), width = "250px", height = "250px")
              )
            }
          )
        )
      )
    )
  )

  server <- function(input, output, session) {

    # Make individual plots ----
    lapply(
      X = 1:12,
      FUN =  function(i) {
        output[[paste0("plot", i)]] <- renderPlot({
          ggplot() + geom_text(aes(1, 1, label = i), size = 50)
        })
      }
    )

    # Filters ----
    observe({
      if (input$type_num == "All") {
        type_num <- c("even", "odd")
      } else {
        type_num <- tolower(input$type_num)
      }

      # Create a df to filters values
      data_frame(num = 1:12) \%>\%
        mutate(
          id = paste0("card", num), # card's ID
          type = if_else(is.even(num), "even", "odd")
        ) \%>\%
        filter(
          type \%in\% type_num,      # filter df to keep desired cards
          num >= input$val_num[1],
          num <= input$val_num[2]
        ) \%>\%
        pull(id) \%>\% # extract only id
        filter_cards(
          session = session,
          shuffleId = "gridNum",
          by = "id",
          filters = .  # <- Vector of IDs to display
        )
    })
  }

  shinyApp(ui, server)
}
}
