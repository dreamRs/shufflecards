% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tags.R
\name{shuffle_card}
\alias{shuffle_card}
\title{Shuffle card element}
\usage{
shuffle_card(..., groups = NULL, id = NULL, title = NULL,
  border = FALSE, closable = FALSE, class = NULL, style = NULL,
  width = NULL, height = NULL)
}
\arguments{
\item{...}{UI elements to include within the card. Named elements canb be used to arrange cards.}

\item{groups}{Character vector of groups used to filtering.}

\item{id}{Cards's id, can be useful to filter cards server-side.}

\item{title}{Optional title, it will be wrapped in a H3 tag and can be updated from the server.}

\item{border}{Logical, add borders to the card.}

\item{closable}{Logical, add a button to remove the card, can't be reversed!}

\item{class}{CSS class(es) to apply on the card.}

\item{style}{Inline CSS to apply on the card.}

\item{width, height}{The width / height of the container, e.g.
\code{'400px'}, or \code{'100\%'}; see \code{\link[htmltools]{validateCssUnit}}.}
}
\description{
This function can be used in \strong{Shiny}
 applications and \strong{RMarkdown} documents to define cards inside a Shuffle layout.
}
\examples{
if (interactive()) {
  library(shiny)
  library(shufflecards)

  ui <- fluidPage(
    tags$h2("Arrange & filter a responsive grid of cards"),
    fluidRow(
      column(
        width = 3,
        radioButtons(
          inputId = "arrange",
          label = "Arrange:",
          choices = c("number", "letter")
        ),
        checkboxGroupInput(
          inputId = "filter",
          label = "Filter:",
          choices = c("red", "blue"),
          selected = c("red", "blue")
        )
      ),
      column(
        width = 9,
        shuffle_container(
          shuffleId = "grid",
          no_card = "Nothing to display !",
          width = "650px",
          shuffle_card(
            num = 1, letter = "C", # for arrange
            groups = "red", # for filter
            tags$div("1 - C", style = "text-align: center; line-height: 200px"),
            style = "border: 3px solid red; border-radius: 5px;",
            width = "300px", # better with fixed width/height
            height = "200px"
          ),
          shuffle_card(
            num = 2, letter = "B", # for arrange
            groups = "blue", # for filter
            tags$div("2 - B", style = "text-align: center; line-height: 200px"),
            style = "border: 3px solid blue; border-radius: 5px;",
            width = "300px", # better with fixed width/height
            height = "200px"
          ),
          shuffle_card(
            num = 3, letter = "D", # for arrange
            groups = c("red", "blue"), # for filter
            tags$div("3 - D", style = "text-align: center; line-height: 200px"),
            style = "border: 3px solid; border-radius: 5px; border-color: red blue blue red;",
            width = "300px", # better with fixed width/height
            height = "200px"
          ),
          shuffle_card(
            num = 4, letter = "A", # for arrange
            groups = "red", # for filter
            tags$div("4 - A", style = "text-align: center; line-height: 200px"),
            style = "border: 3px solid red; border-radius: 5px;",
            width = "300px", # better with fixed width/height
            height = "200px"
          )
        )
      )
    )
  )

  server <- function(input, output, session) {

    observeEvent(input$arrange, {
      arrange_cards(session, "grid", by = input$arrange)
    }, ignoreInit = TRUE)

    observeEvent(input$filter, {
      filter_cards_groups(session, "grid", groups = input$filter)
    }, ignoreInit = TRUE, ignoreNULL = FALSE)

  }

  shinyApp(ui, server)
}
}
